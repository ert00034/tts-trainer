[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tts-trainer"
version = "0.1.0"
description = "Pipeline-orchestrated TTS training system with Discord bot integration"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "TTS Trainer Contributors"}
]
keywords = ["tts", "text-to-speech", "voice-cloning", "discord", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "librosa>=0.9.2",
    "soundfile>=0.12.1",
    "PyYAML>=6.0",
    "TTS>=0.22.0",
    "faster-whisper>=0.10.0",
    "pyannote.audio>=3.1.0",
    "ffmpeg-python>=0.2.0",
    "pydub>=0.25.1",
    "noisereduce>=3.0.0",
    "discord.py>=2.3.0",
    "pandas>=1.5.0",
    "datasets>=2.14.0",
    "transformers>=4.35.0",
    "accelerate>=0.24.0",
    "tensorboard>=2.15.0",
    "scikit-learn>=1.3.0",
    "click>=8.1.0",
    "tqdm>=4.65.0",
    "colorlog>=6.7.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.9.0",
    "flake8>=6.0.0",
    "mypy>=1.6.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipywidgets>=8.1.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
]
monitoring = [
    "wandb>=0.16.0",
    "psutil>=5.9.0",
    "GPUtil>=1.4.0",
    "memory-profiler>=0.61.0",
]
cloud = [
    "boto3>=1.29.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.19.0",
]
advanced = [
    "tortoise-tts>=2.8.0",
    "rnnoise-python>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/user/tts-trainer"
Documentation = "https://github.com/user/tts-trainer/wiki"
Repository = "https://github.com/user/tts-trainer.git"
"Bug Tracker" = "https://github.com/user/tts-trainer/issues"

[project.scripts]
tts-trainer = "main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "dist", "build", ".venv"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "TTS.*",
    "tortoise.*",
    "faster_whisper.*",
    "pyannote.*",
    "librosa.*",
    "soundfile.*",
    "noisereduce.*",
    "ffmpeg.*",
    "pydub.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 